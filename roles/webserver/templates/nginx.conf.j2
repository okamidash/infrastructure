user nginx;
worker_processes  auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;
pcre_jit on;

events {
    worker_connections  1024;
    # Let each process accept multiple connections
    multi_accept on;
    # Preferred connection method for newer linux versions
    use epoll;
}

http {
    proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=STATIC:10m inactive=24h max_size=1g;
    aio_write on;
    resolver 10.0.5.8 ipv6=off valid=40s;
    resolver_timeout 2s;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    log_not_found off;
    types_hash_max_size 4096;
    client_max_body_size 4G;
    client_body_buffer_size 10k;
    client_header_buffer_size 1k;
    include mime.types;
    include gzip.conf;
    access_log /var/log/nginx/access.log;

    # Include sites
{% for domain,site in sites.items() %}
{% if site.https_only is defined and site.https_only %}
server {
    listen 80;
    listen [::]:80;
    server_name {{ domain }}
    return 301 https://{{ domain }}$request_uri;
}
{% endif %}
server {
    server_name {{ domain }};
{#  Http or HTTPS Stuff #}
{% if site.https is defined and site.https %}
    listen 443 ssl http2;
{% endif %}
{% if site.http is defined and site.http %}
    listen 80;
{% endif %}

{# Define extra headers if needed #}
{% if site.extra_headers is defined %}
    {% for header in site.extra_headers %}
    {{ header }};
    {% endfor %}
{% endif %}

{# Proxying #}
{% if site.type == 'proxy' %}
    location ~ / {
        proxy_pass {{ site.target }};
        include conf/ssl.conf;
    }
{% endif %}
{# Redirection #}
{% if site.type == 'redirect' %}
    return 301 {{ site.target }};
{% endif %}
{# Static | TODO#}

}


{% endfor %}
}
